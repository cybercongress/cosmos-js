{"version":3,"sources":["../../src/rpc/cyberdRpc.js"],"names":["axios","require","encoding","stringToHex","CyberdRpc","rpc","constants","cosmosBuilder","CyberDBuilder","method","url","then","response","data","result","getNodeInfo","node_info","network","address","account","coins","amount","remained","maxValue","max_value","error","keywordHash","cids","addressInfo","txRequest","jsObject","JSON","parse","json","signatures","forEach","sign","pub_key","Array","from","Buffer","signature","stringify","txOptions","addressTo","gAmount","getNetworkId","chainId","getAccountInfo","parseFloat","keyPair","NetConfig","importAccount","privateKey","requestData","publicKey","accountNumber","parseInt","account_number","sequence","to","denom","fee","memo","sendRequest","prepareRequestData","res","Error","catch","console","contentHash","fromCid","toCid","linkRequest","CosmosSdkRpc"],"mappings":"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","sourcesContent":["import CosmosSdkRpc from './cosmosSdkRpc';\nimport CyberDBuilder from '../builders/cyberDBuilder';\n\nconst axios = require('axios');\nconst encoding = require('../utils/encoding');\nconst { stringToHex } = require('../utils/hex');\n\nexport default class CyberdRpc extends CosmosSdkRpc {\n  cosmosBuilder;\n\n  constructor(rpc, constants) {\n    super(rpc, constants);\n    this.cosmosBuilder = new CyberDBuilder();\n  }\n  async getNodeInfo() {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/status`,\n    }).then(response => response.data.result);\n  }\n\n  async getNetworkId() {\n    return this.getNodeInfo().then(data => data.node_info.network);\n  }\n\n  async getBalance(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/account?address=\"${address}\"`,\n    }).then(response => (response.data.result ? response.data.result.account.coins[0].amount : 0));\n  }\n\n  async getBandwidth(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/account_bandwidth?address=\"${address}\"`,\n    }).then(response => (response.data.result ? { remained: response.data.result.remained, maxValue: response.data.result.max_value } : { error: 'unknown' }));\n  }\n\n  async search(keywordHash) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/search?cid=%22${keywordHash}%22&page=0&perPage=10`,\n    }).then(response => (response.data.result ? response.data.result.cids : []));\n  }\n\n  async getAccountInfo(address) {\n    const addressInfo = await axios({\n      method: 'get',\n      url: `${this.rpc}/account?address=\"${address}\"`,\n    });\n\n    if (!addressInfo.data.result) {\n      throw 'addressInfo.data.result undefined';\n    }\n    const account = addressInfo.data.result.account;\n    if (!account) {\n      throw 'addressInfo.data.result.account undefined';\n    }\n    return addressInfo.data.result.account;\n  }\n\n  prepareRequestData(txRequest) {\n    const jsObject = JSON.parse(txRequest.json);\n    jsObject.signatures.forEach(sign => {\n      sign.pub_key = Array.from(Buffer.from(sign.pub_key, 'base64'));\n      sign.signature = Array.from(Buffer.from(sign.signature, 'base64'));\n    });\n    txRequest.json = JSON.stringify(jsObject);\n\n    return stringToHex(txRequest.json);\n  }\n\n  async transfer(txOptions, addressTo, gAmount) {\n    const chainId = await this.getNetworkId();\n    const account = await this.getAccountInfo(txOptions.address);\n\n    const amount = parseFloat(gAmount) * 10 ** 9;\n\n    const keyPair = encoding(this.constants.NetConfig).importAccount(txOptions.privateKey);\n\n    const requestData = {\n      account: {\n        address: keyPair.address,\n        publicKey: keyPair.publicKey,\n        privateKey: keyPair.privateKey,\n        accountNumber: parseInt(account.account_number, 10),\n        sequence: parseInt(account.sequence, 10),\n      },\n      chainId,\n      amount,\n      to: addressTo,\n      denom: 'cyb',\n      fee: {\n        denom: '',\n        amount: '0',\n      },\n      memo: '',\n    };\n\n    const txRequest = this.cosmosBuilder.sendRequest(requestData);\n\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/submit_signed_send?data=\"${this.prepareRequestData(txRequest)}\"`,\n    })\n      .then(res => {\n        if (!res.data) {\n          throw new Error('Empty data');\n        }\n        if (res.data.error) {\n          throw res.data.error;\n        }\n        return res.data;\n      })\n      .catch(error => {\n        console.error('Transfer error', error);\n        throw error;\n      });\n  }\n\n  async link(txOptions, keywordHash, contentHash) {\n    const chainId = await this.getNetworkId();\n    const account = await this.getAccountInfo(txOptions.address);\n\n    const keyPair = encoding(this.constants.NetConfig).importAccount(txOptions.privateKey);\n\n    const requestData = {\n      account: {\n        address: keyPair.address,\n        publicKey: keyPair.publicKey,\n        privateKey: keyPair.privateKey,\n        accountNumber: parseInt(account.account_number, 10),\n        sequence: parseInt(account.sequence, 10),\n      },\n      fee: {\n        denom: '',\n        amount: '0',\n      },\n      chainId,\n      fromCid: keywordHash,\n      toCid: contentHash,\n      memo: '',\n    };\n\n    const txRequest = this.cosmosBuilder.linkRequest(requestData);\n\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/submit_signed_link?data=\"${this.prepareRequestData(txRequest)}\"`,\n    })\n      .then(res => {\n        if (!res.data) {\n          throw new Error('Empty data');\n        }\n        if (res.data.error) {\n          throw res.data.error;\n        }\n        return res.data;\n      })\n      .catch(error => {\n        console.error('Link error', error);\n        throw error;\n      });\n  }\n}\n"],"file":"cyberdRpc.js"}