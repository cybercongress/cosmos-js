{"version":3,"sources":["../../src/rpc/cosmosSdkRpc.js"],"names":["axios","require","weiToDecimals","encoding","CosmosSdkRpc","rpc","constants","cosmosBuilder","CosmosSdkBuilder","address","method","url","then","response","data","length","amount","getBalance","cyb","strSplit","toString","split","parseFloat","slice","getNodeInfo","network","addressInfo","value","txOptions","addressTo","mAmount","getNetworkId","chainId","getAccountInfo","account","keyPair","NetConfig","importAccount","privateKey","requestData","publicKey","accountNumber","account_number","sequence","parseInt","from","to","denom","fee","memo","txRequest","sendRequest","console","log","JSON","stringify","tx","parse","json","mode","post","res","Error","error","catch"],"mappings":"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","sourcesContent":["import CosmosSdkBuilder from '../builders/cosmosSdkBuilder';\n\nconst axios = require('axios');\nconst { weiToDecimals } = require('../utils/common');\n\nconst encoding = require('../utils/encoding');\n\nexport default class CosmosSdkRpc {\n  rpc;\n\n  constants;\n\n  cosmosBuilder;\n\n  constructor(rpc, constants) {\n    this.rpc = rpc;\n    this.constants = constants;\n    this.cosmosBuilder = new CosmosSdkBuilder();\n  }\n\n  async getBalance(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/bank/balances/${address}`,\n    }).then(response => {\n      return response.data && response.data.length ? response.data[0].amount : 0;\n    });\n  }\n\n  async getMegaBalance(address) {\n    return this.getBalance(address).then(cyb => {\n      cyb = weiToDecimals(cyb, 6);\n\n      const strSplit = cyb.toString().split('.');\n      if (strSplit.length === 1) {\n        return cyb;\n      }\n      return parseFloat(`${strSplit[0]}.${strSplit[1].slice(0, 3)}`);\n    });\n  }\n\n  async getGigaBalance(address) {\n    return this.getBalance(address).then(cyb => {\n      cyb = weiToDecimals(cyb, 9);\n\n      const strSplit = cyb.toString().split('.');\n      if (strSplit.length === 1) {\n        return cyb;\n      }\n      return parseFloat(`${strSplit[0]}.${strSplit[1].slice(0, 3)}`);\n    });\n  }\n\n  async getNodeInfo() {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/node_info`,\n    }).then(response => response.data);\n  }\n\n  async getNetworkId() {\n    return this.getNodeInfo().then(data => data.network);\n  }\n\n  async getAccountInfo(address) {\n    const addressInfo = await axios({\n      method: 'get',\n      url: `${this.rpc}/auth/accounts/${address}`,\n    });\n\n    if (!addressInfo.data.value) {\n      throw 'addressInfo.data.result undefined';\n    }\n    return addressInfo.data.value;\n  }\n\n  async transfer(txOptions, addressTo, mAmount) {\n    const chainId = await this.getNetworkId();\n    const account = await this.getAccountInfo(txOptions.address);\n\n    const amount = parseFloat(mAmount) * 10 ** 6;\n\n    const keyPair = encoding(this.constants.NetConfig).importAccount(txOptions.privateKey);\n\n    const requestData = {\n      account: {\n        address: keyPair.address,\n        publicKey: keyPair.publicKey,\n        privateKey: keyPair.privateKey,\n        accountNumber: account.account_number.toString(),\n        sequence: parseInt(account.sequence, 10),\n      },\n      chainId,\n      amount,\n      from: account.address,\n      to: addressTo,\n      denom: 'uatom',\n      fee: {\n        denom: 'uatom',\n        amount: '500',\n      },\n      memo: '',\n    };\n\n    const txRequest = this.cosmosBuilder.sendRequest(requestData);\n    console.log(\n      'txRequest',\n      JSON.stringify({\n        tx: JSON.parse(txRequest.json),\n        mode: 'sync',\n      })\n    );\n\n    return (\n      axios\n        .post(`${this.rpc}/txs`, {\n          tx: JSON.parse(txRequest.json),\n          mode: 'sync',\n        })\n        // .post(`${this.rpc}/txs`, JSON.parse(txRequest.json))\n        .then(res => {\n          if (!res.data) {\n            throw new Error('Empty data');\n          }\n          if (res.data.error) {\n            throw res.data.error;\n          }\n          return res.data;\n        })\n        .catch(error => {\n          console.error('Transfer error', error);\n          throw error;\n        })\n    );\n  }\n}\n"],"file":"cosmosSdkRpc.js"}