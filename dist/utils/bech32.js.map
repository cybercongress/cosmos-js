{"version":3,"sources":["../../src/utils/bech32.js"],"names":["hex","require","bech32impl","bech32ToAddress","bech32Str","ownKey","decode","bytesToHex","fromWords","words","toUpperCase","addressToBech32","prefix","str","strByte","toWords","Buffer","from","encode","isBech32","length","preReg","RegExp","test","allReg","e","module","exports"],"mappings":";;;;;;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAA1B;;AAEA,SAASE,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,MAAMC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkBF,SAAlB,CAAf;AAEA,SAAOJ,GAAG,CAACO,UAAJ,CAAeL,UAAU,CAACM,SAAX,CAAqBH,MAAM,CAACI,KAA5B,CAAf,EAAmDC,WAAnD,EAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,GAAjC,EAAsC;AACpC,MAAMC,OAAO,GAAGZ,UAAU,CAACa,OAAX,CAAmBC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiB,KAAjB,CAAnB,CAAhB;AAEA,SAAOX,UAAU,CAACgB,MAAX,CAAkBN,MAAlB,EAA0BE,OAA1B,CAAP;AACD;;AAED,SAASK,QAAT,CAAkBP,MAAlB,EAA0BC,GAA1B,EAA+B;AAC7B,MAAI,CAACD,MAAD,IAAWA,MAAM,CAACQ,MAAP,KAAkB,CAAjC,EAAoC;AAClC,WAAO,KAAP;AACD;;AAED,MAAMC,MAAM,GAAG,IAAIC,MAAJ,YAAeV,MAAf,OAAf;;AAEA,MAAI,CAACS,MAAM,CAACE,IAAP,CAAYV,GAAZ,CAAL,EAAuB;AACrB,WAAO,KAAP;AACD;;AAED,MAAMW,MAAM,GAAG,IAAIF,MAAJ,CAAW,iBAAX,CAAf;;AAEA,MAAI,CAACE,MAAM,CAACD,IAAP,CAAYV,GAAZ,CAAL,EAAuB;AACrB,WAAO,KAAP;AACD;;AAED,MAAI;AACFV,IAAAA,eAAe,CAACU,GAAD,CAAf;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOY,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,QAAQ,EAARA,QADe;AAEfR,EAAAA,eAAe,EAAfA,eAFe;AAGfR,EAAAA,eAAe,EAAfA;AAHe,CAAjB","sourcesContent":["const hex = require('./hex');\nconst bech32impl = require('bech32');\n\nfunction bech32ToAddress(bech32Str) {\n  const ownKey = bech32impl.decode(bech32Str);\n\n  return hex.bytesToHex(bech32impl.fromWords(ownKey.words)).toUpperCase();\n}\n\nfunction addressToBech32(prefix, str) {\n  const strByte = bech32impl.toWords(Buffer.from(str, 'hex'));\n\n  return bech32impl.encode(prefix, strByte);\n}\n\nfunction isBech32(prefix, str) {\n  if (!prefix || prefix.length === 0) {\n    return false;\n  }\n\n  const preReg = new RegExp(`^${prefix}1`);\n\n  if (!preReg.test(str)) {\n    return false;\n  }\n\n  const allReg = new RegExp(/^[0-9a-zA-Z]*$/i);\n\n  if (!allReg.test(str)) {\n    return false;\n  }\n\n  try {\n    bech32ToAddress(str);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = {\n  isBech32,\n  addressToBech32,\n  bech32ToAddress,\n};\n"],"file":"bech32.js"}