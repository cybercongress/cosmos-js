{"version":3,"sources":["../../src/utils/hex.js"],"names":["hexToBytes","hex","bytes","c","length","push","parseInt","substr","bytesToHex","i","toString","join","toUpperCase","stringToHex","str","charCodeAt","arrToHex","arr","hasPrefix","map","e","slice","concat","hexToArr","_hex","isHex","_str","replace","test","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,KAAK,CAACG,IAAN,CAAWC,QAAQ,CAACL,GAAG,CAACM,MAAJ,CAAWJ,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAnB;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,SAASM,UAAT,CAAoBN,KAApB,EAA2B;AACzB,MAAMD,GAAG,GAAG,EAAZ;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACE,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AAAE;AACvCR,IAAAA,GAAG,CAACI,IAAJ,CAAS,CAACH,KAAK,CAACO,CAAD,CAAL,KAAa,CAAd,EAAiBC,QAAjB,CAA0B,EAA1B,CAAT,EADqC,CACI;;AACzCT,IAAAA,GAAG,CAACI,IAAJ,CAAS,CAACH,KAAK,CAACO,CAAD,CAAL,GAAW,GAAZ,EAAiBC,QAAjB,CAA0B,EAA1B,CAAT,EAFqC,CAEI;AAC1C;;AACD,SAAOT,GAAG,CAACU,IAAJ,CAAS,EAAT,EAAaC,WAAb,EAAP;AACD;;AAED,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAMZ,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,GAAG,CAACV,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AAAE;AACrCP,IAAAA,KAAK,CAACG,IAAN,CAAWS,GAAG,CAACC,UAAJ,CAAeN,CAAf,EAAkBC,QAAlB,CAA2B,EAA3B,CAAX;AACD;;AACD,SAAOR,KAAK,CAACS,IAAN,CAAW,EAAX,CAAP;AACD;;AAED,SAASK,QAAT,CAAkBC,GAAlB,EAAyC;AAAA,MAAlBC,SAAkB,uEAAN,IAAM;AACvC,MAAMjB,GAAG,GAAGgB,GAAG,CACZE,GADS,CACL,UAAAC,CAAC,EAAI;AACR,WAAO,YAAK,CAACA,CAAC,GAAG,IAAL,EAAWV,QAAX,CAAoB,EAApB,CAAL,EAA+BW,KAA/B,CAAqC,CAAC,CAAtC,CAAP,CADQ,CACyC;AAClD,GAHS,EAITV,IAJS,CAIJ,EAJI,CAAZ;AAKA,MAAIO,SAAJ,EAAe,OAAO,KAAKI,MAAL,CAAYrB,GAAZ,CAAP;AACf,SAAOA,GAAP;AACD;;AAED,SAASsB,QAAT,CAAkBC,IAAlB,EAA0C;AAAA,MAAlBN,SAAkB,uEAAN,IAAM;AACxC,MAAIjB,GAAG,GAAGuB,IAAV;;AACA,MAAIN,SAAJ,EAAe;AACbjB,IAAAA,GAAG,GAAGA,GAAG,CAACoB,KAAJ,CAAU,CAAV,CAAN;AACD;;AAED,SAAOrB,UAAU,CAACC,GAAD,CAAjB;AACD;;AAED,SAASwB,KAAT,CAAeC,IAAf,EAAqB;AACnB,MAAMZ,GAAG,GAAGY,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAZ;;AACA,SAAO,kBAAkBC,IAAlB,CAAuBd,GAAvB,CAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACf9B,EAAAA,UAAU,EAAVA,UADe;AAEfQ,EAAAA,UAAU,EAAVA,UAFe;AAGfK,EAAAA,WAAW,EAAXA,WAHe;AAIfY,EAAAA,KAAK,EAALA,KAJe;AAKfT,EAAAA,QAAQ,EAARA,QALe;AAMfO,EAAAA,QAAQ,EAARA;AANe,CAAjB","sourcesContent":["function hexToBytes(hex) {\n  const bytes = [];\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n  return bytes;\n}\n\nfunction bytesToHex(bytes) {\n  const hex = [];\n\n  for (let i = 0; i < bytes.length; i++) { // eslint-disable-line\n    hex.push((bytes[i] >>> 4).toString(16)); // eslint-disable-line\n    hex.push((bytes[i] & 0xf).toString(16)); // eslint-disable-line\n  }\n  return hex.join('').toUpperCase();\n}\n\nfunction stringToHex(str) {\n  const bytes = [];\n\n  for (let i = 0; i < str.length; i++) { // eslint-disable-line\n    bytes.push(str.charCodeAt(i).toString(16));\n  }\n  return bytes.join('');\n}\n\nfunction arrToHex(arr, hasPrefix = true) {\n  const hex = arr\n    .map(e => {\n      return `00${(e & 0xff).toString(16)}`.slice(-2); // eslint-disable-line\n    })\n    .join('');\n  if (hasPrefix) return '0x'.concat(hex);\n  return hex;\n}\n\nfunction hexToArr(_hex, hasPrefix = true) {\n  let hex = _hex;\n  if (hasPrefix) {\n    hex = hex.slice(2);\n  }\n\n  return hexToBytes(hex);\n}\n\nfunction isHex(_str) {\n  const str = _str.replace('0x', '');\n  return /^[0-9a-fA-F]*$/i.test(str);\n}\n\nmodule.exports = {\n  hexToBytes,\n  bytesToHex,\n  stringToHex,\n  isHex,\n  arrToHex,\n  hexToArr,\n};\n"],"file":"hex.js"}