{"version":3,"sources":["../src/codec.js"],"names":["require","Codec","PubKeySecp256k1","MsgMultiSend","MsgSend","CosmosCodec","codec","registerConcrete","instance","type","opts","val","marshalJson","marshalBinary"],"mappings":";;;;;;;;;;;;;;;;;eAAkBA,OAAO,CAAC,UAAD,C;IAAjBC,K,YAAAA,K;;gBAEoBD,OAAO,CAAC,cAAD,C;IAA3BE,e,aAAAA,e;;gBAE0BF,OAAO,CAAC,YAAD,C;IAAjCG,Y,aAAAA,Y;IAAcC,O,aAAAA,O;;IAEDC,W;;;AAGnB,yBAAc;AAAA;;AAAA;;AACZ,SAAKC,KAAL,GAAa,IAAIL,KAAJ,EAAb;AACD;;;;sCAEiB;AAChB,WAAKK,KAAL,CAAWC,gBAAX,CAA4B,IAAIL,eAAJ,EAA5B,EAAmD,4BAAnD,EAAiF,EAAjF;AACD;;;kCAEa;AACZ,WAAKI,KAAL,CAAWC,gBAAX,CAA4B,IAAIH,OAAJ,EAA5B,EAA2C,oBAA3C,EAAiE,EAAjE;AACA,WAAKE,KAAL,CAAWC,gBAAX,CAA4B,IAAIJ,YAAJ,EAA5B,EAAgD,yBAAhD,EAA2E,EAA3E;AACD;;;kCAEa;AACZ,aAAO,KAAKG,KAAZ;AACD;;;qCAEgBE,Q,EAAUC,I,EAAMC,I,EAAM;AACrC,aAAO,KAAKJ,KAAL,CAAWC,gBAAX,CAA4BC,QAA5B,EAAsCC,IAAtC,EAA4CC,IAA5C,CAAP;AACD;;;gCAEWC,G,EAAK;AACf,aAAO,KAAKL,KAAL,CAAWM,WAAX,CAAuBD,GAAvB,CAAP;AACD;;;kCAEaA,G,EAAK;AACjB,aAAO,KAAKL,KAAL,CAAWO,aAAX,CAAyBF,GAAzB,CAAP;AACD;;;;;;;AACF,C,CACD;AAEA;AACA;AACA","sourcesContent":["const { Codec } = require('js-amino');\n\nconst { PubKeySecp256k1 } = require('./types/base');\n\nconst { MsgMultiSend, MsgSend } = require('./types/tx');\n\nexport default class CosmosCodec {\n  codec;\n\n  constructor() {\n    this.codec = new Codec();\n  }\n\n  applyTendermint() {\n    this.codec.registerConcrete(new PubKeySecp256k1(), 'tendermint/PubKeySecp256k1', {});\n  }\n\n  applyCosmos() {\n    this.codec.registerConcrete(new MsgSend(), 'cosmos-sdk/MsgSend', {});\n    this.codec.registerConcrete(new MsgMultiSend(), 'cosmos-sdk/MsgMultiSend', {});\n  }\n\n  getInstance() {\n    return this.codec;\n  }\n\n  registerConcrete(instance, type, opts) {\n    return this.codec.registerConcrete(instance, type, opts);\n  }\n\n  marshalJson(val) {\n    return this.codec.marshalJson(val);\n  }\n\n  marshalBinary(val) {\n    return this.codec.marshalBinary(val);\n  }\n};\n// codec.registerConcrete(new StdTx(), 'auth/StdTx', {});\n\n// codec.registerConcrete(new SignatureSecp256k1(), \"tendermint/SigSecp256k1\", {});\n// codec.registerConcrete(new BasicSignature(), \"tendermint/BasicSig\", {})\n// codec.registerConcrete(new Signature(), \"tendermint/AuthSig\", {})\n"],"file":"codec.js"}