{"version":3,"sources":["../../src/builders/cyberDBuilder.js"],"names":["require","Coin","Input","Output","MsgMultiSend","CyberDTxRequest","CyberDFee","CyberDSignature","CyberDMsgLink","CyberDMsgLinkData","hexToBytes","bech32ToAddress","sign","CyberDBuilder","codec","CosmosCodec","registerConcrete","sendOptions","account","coin","denom","amount","toString","msg","address","to","abstractRequest","linkData","fromCid","toCid","options","data","memo","msgs","fee","sigs","signedBytes","Array","from","publicKey","parseInt","accountNumber","sequence","messageJson","messageObj","JSON","parse","gas","privateKey","stringify","CosmosSdkBuilder"],"mappings":"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","sourcesContent":["import CosmosSdkBuilder from './cosmosSdkBuilder';\n\nimport CosmosCodec from '../codec';\n\nconst { Coin, Input, Output } = require('../types/base');\nconst { MsgMultiSend } = require('../types/tx');\nconst { CyberDTxRequest, CyberDFee, CyberDSignature, CyberDMsgLink, CyberDMsgLinkData } = require('../types/cyberd');\n\nconst { hexToBytes } = require('../utils/hex');\n\nconst { bech32ToAddress } = require('../utils/bech32');\n\nconst { sign } = require('../utils/common');\n\nexport default class CyberDBuilder extends CosmosSdkBuilder {\n  constructor() {\n    super();\n    this.codec = new CosmosCodec();\n    this.codec.registerConcrete(new CyberDMsgLink(), 'cyberd/Link', {});\n  }\n\n  sendRequest(sendOptions) {\n    const { account } = sendOptions;\n    const coin = new Coin(sendOptions.denom, sendOptions.amount.toString());\n\n    const msg = new MsgMultiSend([new Input(account.address, [coin])], [new Output(sendOptions.to, [coin])]);\n\n    return this.abstractRequest(sendOptions, msg);\n  }\n\n  linkRequest(sendOptions) {\n    const linkData = new CyberDMsgLinkData(sendOptions.fromCid, sendOptions.toCid);\n    const msg = new CyberDMsgLink(sendOptions.account.address, [linkData]);\n    return this.abstractRequest(sendOptions, msg);\n  }\n\n  getResultTx(options, data) {\n    const { memo } = options;\n    const { msgs, fee, sigs } = data;\n    return new CyberDTxRequest(msgs, fee, sigs, memo);\n  }\n\n  getFee(options) {\n    return new CyberDFee([new Coin(options.fee.denom, options.fee.amount)], 200000);\n  }\n\n  getSignature(options, signedBytes) {\n    const { account } = options;\n    return new CyberDSignature(Array.from(hexToBytes(bech32ToAddress(account.publicKey))), Array.from(signedBytes), parseInt(account.accountNumber), account.sequence);\n  }\n\n  signMessageJson(options, messageJson) {\n    const messageObj = JSON.parse(messageJson);\n    messageObj.fee.gas = messageObj.fee.gas.toString();\n    return sign(options.account.privateKey, JSON.stringify(messageObj));\n  }\n}\n"],"file":"cyberDBuilder.js"}