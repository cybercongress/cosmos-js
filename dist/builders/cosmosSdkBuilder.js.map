{"version":3,"sources":["../../src/builders/cosmosSdkBuilder.js"],"names":["_","require","MsgSend","Fee","StdTx","Signature","Coin","PubKeySecp256k1","MsgForSign","hexToBytes","arrToHex","bech32ToAddress","sign","CosmosSdkBuilder","codec","CosmosCodec","applyTendermint","applyCosmos","options","fee","denom","amount","data","account","memo","msgs","chainId","toString","accountNumber","sequence","signedBytes","publicKey","sigs","messageJson","privateKey","msg","isUndefined","isNull","getFee","msgForSign","getMessageForSign","signMessageJson","marshalJson","sig","getSignature","stdTx","getResultTx","json","hex","marshalBinary","isString","sendOptions","coin","address","to","abstractRequest","methodName","func","bind"],"mappings":"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","sourcesContent":["import CosmosCodec from '../codec';\n\nconst _ = require('lodash');\n\nconst { MsgSend } = require('../types/tx');\n\nconst { Fee, StdTx, Signature, Coin, PubKeySecp256k1, MsgForSign } = require('../types/base');\n\nconst { hexToBytes, arrToHex } = require('../utils/hex');\n\nconst { bech32ToAddress } = require('../utils/bech32');\n\nconst { sign } = require('../utils/common');\n\nexport default class CosmosSdkBuilder {\n  codec;\n\n  constructor() {\n    this.codec = new CosmosCodec();\n    this.codec.applyTendermint();\n    this.codec.applyCosmos();\n  }\n\n  setCodec(codec) {\n    this.codec = codec;\n  }\n\n  getFee(options) {\n    return new Fee([new Coin(options.fee.denom, options.fee.amount)], '200000');\n  }\n\n  getMessageForSign(options, data) {\n    const { account, memo } = options;\n    const { msgs, fee } = data;\n    return new MsgForSign(options.chainId.toString(), account.accountNumber.toString(), account.sequence.toString(), fee, msgs, memo);\n  }\n\n  getSignature(options, signedBytes) {\n    return new Signature(new PubKeySecp256k1(hexToBytes(bech32ToAddress(options.account.publicKey))), signedBytes);\n  }\n\n  getResultTx(options, data) {\n    const { memo } = options;\n    const { msgs, fee, sigs } = data;\n    return new StdTx(msgs, fee, sigs, memo);\n  }\n\n  signMessageJson(options, messageJson) {\n    return sign(options.account.privateKey, messageJson);\n  }\n\n  abstractRequest(options, msg) {\n    if (_.isUndefined(options.memo) || _.isNull(options.memo)) {\n      options.memo = '';\n    }\n    const fee = this.getFee(options);\n\n    const msgForSign = this.getMessageForSign(options, { msgs: [msg], fee });\n    const signedBytes = this.signMessageJson(options, this.codec.marshalJson(msgForSign));\n    const sig = this.getSignature(options, signedBytes);\n\n    const stdTx = this.getResultTx(options, { msgs: [msg], sigs: [sig], fee });\n    const json = this.codec.marshalJson(stdTx);\n\n    let hex = arrToHex(this.codec.marshalBinary(stdTx));\n\n    if (!_.isString(hex)) {\n      hex = hex.toString('base64');\n    }\n    return {\n      json,\n      hex,\n    };\n  }\n\n  sendRequest(sendOptions) {\n    const { account } = sendOptions;\n    const coin = new Coin(sendOptions.denom, sendOptions.amount.toString());\n\n    // hexToBytes(bech32ToAddress())\n    const msg = new MsgSend(account.address, sendOptions.to, [coin]);\n    return this.abstractRequest(sendOptions, msg);\n  }\n\n  setMethod(methodName, func) {\n    this[methodName] = func;\n  }\n\n  callMethod(methodName) {\n    return this[methodName].bind(this);\n  }\n}\n"],"file":"cosmosSdkBuilder.js"}