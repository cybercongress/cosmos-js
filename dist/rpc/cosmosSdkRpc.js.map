{"version":3,"sources":["../../src/rpc/cosmosSdkRpc.js"],"names":["axios","require","weiToDecimals","encoding","CosmosSdkRpc","rpc","constants","cosmosBuilder","CosmosSdkBuilder","address","method","url","then","response","data","length","amount","getBalance","cyb","strSplit","toString","split","parseFloat","slice","getNodeInfo","network","addressInfo","value","txOptions","msgOptions","getNetworkId","chainId","getAccountInfo","account","keyPair","NetConfig","importAccount","privateKey","_","extend","publicKey","accountNumber","account_number","sequence","parseInt","fee","denom","memo","requestPromise","res","Error","error","catch","console","addressTo","mAmount","prepareOptions","from","to","options","txRequest","sendRequest","handleResponse","post","tx","JSON","parse","json","mode"],"mappings":"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","sourcesContent":["import CosmosSdkBuilder from '../builders/cosmosSdkBuilder';\n\nconst axios = require('axios');\nconst {weiToDecimals} = require('../utils/common');\n\nconst encoding = require('../utils/encoding');\n\nexport default class CosmosSdkRpc {\n  rpc;\n\n  constants;\n\n  cosmosBuilder;\n\n  constructor(rpc, constants) {\n    this.rpc = rpc;\n    this.constants = constants;\n    this.cosmosBuilder = new CosmosSdkBuilder();\n  }\n\n  async getBalance(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/bank/balances/${address}`,\n    }).then(response => {\n      return response.data && response.data.length ? response.data[0].amount : 0;\n    });\n  }\n\n  async getMegaBalance(address) {\n    return this.getBalance(address).then(cyb => {\n      cyb = weiToDecimals(cyb, 6);\n\n      const strSplit = cyb.toString().split('.');\n      if (strSplit.length === 1) {\n        return cyb;\n      }\n      return parseFloat(`${strSplit[0]}.${strSplit[1].slice(0, 3)}`);\n    });\n  }\n\n  async getGigaBalance(address) {\n    return this.getBalance(address).then(cyb => {\n      cyb = weiToDecimals(cyb, 9);\n\n      const strSplit = cyb.toString().split('.');\n      if (strSplit.length === 1) {\n        return cyb;\n      }\n      return parseFloat(`${strSplit[0]}.${strSplit[1].slice(0, 3)}`);\n    });\n  }\n\n  async getNodeInfo() {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/node_info`,\n    }).then(response => response.data);\n  }\n\n  async getNetworkId() {\n    return this.getNodeInfo().then(data => data.network);\n  }\n\n  async getAccountInfo(address) {\n    const addressInfo = await axios({\n      method: 'get',\n      url: `${this.rpc}/auth/accounts/${address}`,\n    });\n\n    if (!addressInfo.data.value) {\n      throw 'addressInfo.data.result undefined';\n    }\n    return addressInfo.data.value;\n  }\n\n  async prepareOptions(txOptions, msgOptions) {\n    const chainId = await this.getNetworkId();\n    const account = await this.getAccountInfo(txOptions.address);\n    \n    const keyPair = encoding(this.constants.NetConfig).importAccount(txOptions.privateKey);\n\n    return _.extend({\n      account: {\n        address: keyPair.address,\n        publicKey: keyPair.publicKey,\n        privateKey: keyPair.privateKey,\n        accountNumber: account.account_number.toString(),\n        sequence: parseInt(account.sequence, 10),\n      },\n      chainId,\n      fee: {\n        denom: 'uatom',\n        amount: '500',\n      },\n      memo: '',\n    }, msgOptions || {});\n  }\n\n  handleResponse(requestPromise) {\n    return requestPromise.then(res => {\n      if (!res.data) {\n        throw new Error('Empty data');\n      }\n      if (res.data.error) {\n        throw res.data.error;\n      }\n      return res.data;\n    })\n      .catch(error => {\n        console.error('Tx error', error);\n        throw error;\n      });\n  }\n\n  async transfer(txOptions, addressTo, mAmount) {\n    const amount = parseFloat(mAmount) * 10 ** 6;\n    const options = await this.prepareOptions(txOptions, {\n      from: txOptions.address,\n      to: addressTo,\n      amount,\n      denom: 'uatom'\n    });\n\n    const txRequest = this.cosmosBuilder.sendRequest(options);\n\n    return this.handleResponse(axios.post(`${this.rpc}/txs`, {\n        tx: JSON.parse(txRequest.json),\n        mode: 'sync',\n    }));\n  }\n}\n"],"file":"cosmosSdkRpc.js"}