{"version":3,"sources":["../../src/rpc/cyberdRpc.js"],"names":["axios","require","stringToHex","CyberdRpc","rpc","constants","cosmosBuilder","CyberDBuilder","method","url","then","response","data","result","getNodeInfo","node_info","network","address","account","coins","amount","remained","maxValue","max_value","error","keywordHash","cids","addressInfo","txRequest","jsObject","JSON","parse","json","signatures","forEach","sign","pub_key","Array","from","Buffer","signature","stringify","txOptions","addressTo","gAmount","parseFloat","prepareOptions","to","denom","fee","options","sendRequest","handleResponse","prepareRequestData","contentHash","fromCid","toCid","linkRequest","CosmosSdkRpc"],"mappings":"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","sourcesContent":["import CosmosSdkRpc from './cosmosSdkRpc';\nimport CyberDBuilder from '../builders/cyberDBuilder';\n\nconst axios = require('axios');\nconst { stringToHex } = require('../utils/hex');\n\nexport default class CyberdRpc extends CosmosSdkRpc {\n  constructor(rpc, constants) {\n    super(rpc, constants);\n    this.cosmosBuilder = new CyberDBuilder();\n  }\n  async getNodeInfo() {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/status`,\n    }).then(response => response.data.result);\n  }\n\n  async getNetworkId() {\n    return this.getNodeInfo().then(data => data.node_info.network);\n  }\n\n  async getBalance(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/account?address=\"${address}\"`,\n    }).then(response => (response.data.result ? response.data.result.account.coins[0].amount : 0));\n  }\n\n  async getBandwidth(address) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/account_bandwidth?address=\"${address}\"`,\n    }).then(response => (response.data.result ? { remained: response.data.result.remained, maxValue: response.data.result.max_value } : { error: 'unknown' }));\n  }\n\n  async search(keywordHash) {\n    return axios({\n      method: 'get',\n      url: `${this.rpc}/search?cid=%22${keywordHash}%22&page=0&perPage=10`,\n    }).then(response => (response.data.result ? response.data.result.cids : []));\n  }\n\n  async getAccountInfo(address) {\n    const addressInfo = await axios({\n      method: 'get',\n      url: `${this.rpc}/account?address=\"${address}\"`,\n    });\n\n    if (!addressInfo.data.result) {\n      throw 'addressInfo.data.result undefined';\n    }\n    const account = addressInfo.data.result.account;\n    if (!account) {\n      throw 'addressInfo.data.result.account undefined';\n    }\n    return addressInfo.data.result.account;\n  }\n\n  prepareRequestData(txRequest) {\n    const jsObject = JSON.parse(txRequest.json);\n    jsObject.signatures.forEach(sign => {\n      sign.pub_key = Array.from(Buffer.from(sign.pub_key, 'base64'));\n      sign.signature = Array.from(Buffer.from(sign.signature, 'base64'));\n    });\n    txRequest.json = JSON.stringify(jsObject);\n\n    return stringToHex(txRequest.json);\n  }\n\n  async transfer(txOptions, addressTo, gAmount) {\n    const amount = parseFloat(gAmount) * 10 ** 9;\n    \n    const options = await this.prepareOptions(txOptions, {\n      from: txOptions.address,\n      to: addressTo,\n      amount,\n      denom: 'cyb',\n      fee: {\n        denom: '',\n        amount: '0',\n      }\n    });\n\n    const txRequest = this.cosmosBuilder.sendRequest(options);\n    \n    return this.handleResponse(axios({\n      method: 'get',\n      url: `${this.rpc}/submit_signed_send?data=\"${this.prepareRequestData(txRequest)}\"`,\n    }));\n  }\n\n  async link(txOptions, keywordHash, contentHash) {\n    const options = await this.prepareOptions(txOptions, {\n      fromCid: keywordHash,\n      toCid: contentHash,\n      fee: {\n        denom: '',\n        amount: '0',\n      }\n    });\n\n    const txRequest = this.cosmosBuilder.linkRequest(options);\n\n    return this.handleResponse(axios({\n      method: 'get',\n      url: `${this.rpc}/submit_signed_link?data=\"${this.prepareRequestData(txRequest)}\"`,\n    }));\n  }\n}\n"],"file":"cyberdRpc.js"}